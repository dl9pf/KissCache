version: "3.4"
services:
  db:
    image: ${KC_POSTGRES_IMAGE}
    environment:
      POSTGRES_USER: kiss-cache
      POSTGRES_PASSWORD: kiss-cache-passwd
    volumes:
    - db:/var/lib/postgresql/data
    restart: unless-stopped

  celery-beat:
    image: ${KC_IMAGE}
    user: kiss-cache
    environment:
      SERVICE: celery-beat
    depends_on:
    - redis
    restart: unless-stopped

  celery-worker:
    image: ${KC_IMAGE}
    user: kiss-cache
    environment:
      SERVICE: celery-worker
    volumes:
    - cache:/var/cache/kiss-cache/
    - ./share/kiss-cache.yaml:/etc/kiss-cache.yaml
    depends_on:
    - db
    - redis
    restart: unless-stopped

  redis:
    image: ${KC_REDIS_IMAGE}
    restart: unless-stopped

  web:
    build: .
    image: ${KC_IMAGE}
    volumes:
    - cache:/var/cache/kiss-cache/
    - ./share/kiss-cache.yaml:/etc/kiss-cache.yaml
    depends_on:
    - db
    - redis
    environment:
      SERVICE: gunicorn
    restart: unless-stopped
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.web.entrypoints=web"
    - "traefik.http.routers.web.rule=PathPrefix(`/`)"
    - "traefik.http.routers.web.service=web"
    - "traefik.http.services.web.loadbalancer.server.port=80"
    - "traefik.http.services.web.loadbalancer.healthcheck.interval=10"
    - "traefik.http.services.web.loadbalancer.healthcheck.timeout=5"

  front-proxy:
    image: ${KC_TRAEFIC}
    command: "--configfile /etc/traefik.yaml"
    ports:
      - "80:80"
    volumes:
    - ./share/traefik.yaml:/etc/traefik.yaml
    - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
    - web

volumes:
  db:
    name: kiss-cache-db
  cache:
    name: kiss-cache-cache
